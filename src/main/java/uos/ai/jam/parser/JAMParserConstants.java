/* Generated By:JavaCC: Do not edit this line. JAMParserConstants.java */
package uos.ai.jam.parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface JAMParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int WS = 1;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 5;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 6;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 7;
  /** RegularExpression Id. */
  int STRING = 10;
  /** RegularExpression Id. */
  int ws = 17;
  /** RegularExpression Id. */
  int delim = 18;
  /** RegularExpression Id. */
  int letter = 19;
  /** RegularExpression Id. */
  int digit = 20;
  /** RegularExpression Id. */
  int charac = 21;
  /** RegularExpression Id. */
  int EXP = 22;
  /** RegularExpression Id. */
  int SIGN = 23;
  /** RegularExpression Id. */
  int number0 = 24;
  /** RegularExpression Id. */
  int number1 = 25;
  /** RegularExpression Id. */
  int number2 = 26;
  /** RegularExpression Id. */
  int hexa0 = 27;
  /** RegularExpression Id. */
  int IMPORT_DECL = 28;
  /** RegularExpression Id. */
  int GOAL_DECL = 29;
  /** RegularExpression Id. */
  int FACT_DECL = 30;
  /** RegularExpression Id. */
  int OBSERVER_DECL = 31;
  /** RegularExpression Id. */
  int PLAN_START = 32;
  /** RegularExpression Id. */
  int PLAN_NAME = 33;
  /** RegularExpression Id. */
  int PLAN_DOC = 34;
  /** RegularExpression Id. */
  int PLAN_GOALSPEC = 35;
  /** RegularExpression Id. */
  int PLAN_CONCLUDESPEC = 36;
  /** RegularExpression Id. */
  int PLAN_CONTEXT = 37;
  /** RegularExpression Id. */
  int PLAN_PRECONDITION = 38;
  /** RegularExpression Id. */
  int PLAN_UTILITY = 39;
  /** RegularExpression Id. */
  int PLAN_EFFECTS = 40;
  /** RegularExpression Id. */
  int PLAN_FAILURE = 41;
  /** RegularExpression Id. */
  int PLAN_ATTRIBUTES = 42;
  /** RegularExpression Id. */
  int PLAN_BODY = 43;
  /** RegularExpression Id. */
  int PLAN_BODY_AND = 44;
  /** RegularExpression Id. */
  int PLAN_BODY_OR = 45;
  /** RegularExpression Id. */
  int PLAN_BODY_PARALLEL = 46;
  /** RegularExpression Id. */
  int PLAN_BODY_DO_ALL = 47;
  /** RegularExpression Id. */
  int PLAN_BODY_DO_ANY = 48;
  /** RegularExpression Id. */
  int PLAN_BODY_DO = 49;
  /** RegularExpression Id. */
  int PLAN_BODY_WHILE = 50;
  /** RegularExpression Id. */
  int PLAN_BODY_WHEN = 51;
  /** RegularExpression Id. */
  int PLAN_BODY_ATOMIC = 52;
  /** RegularExpression Id. */
  int PLAN_BODY_WAIT = 53;
  /** RegularExpression Id. */
  int IF = 54;
  /** RegularExpression Id. */
  int ELSE = 55;
  /** RegularExpression Id. */
  int FOR = 56;
  /** RegularExpression Id. */
  int KEYWORD_UTILITY = 57;
  /** RegularExpression Id. */
  int KEYWORD_BY = 58;
  /** RegularExpression Id. */
  int KEYWORD_NOT_BY = 59;
  /** RegularExpression Id. */
  int EXECUTE = 60;
  /** RegularExpression Id. */
  int LOAD_PACKAGE = 61;
  /** RegularExpression Id. */
  int LOAD_FROM_URL = 62;
  /** RegularExpression Id. */
  int PARSE = 63;
  /** RegularExpression Id. */
  int FACT = 64;
  /** RegularExpression Id. */
  int RETRIEVE = 65;
  /** RegularExpression Id. */
  int IS_TRUE = 66;
  /** RegularExpression Id. */
  int POST = 67;
  /** RegularExpression Id. */
  int UNPOST = 68;
  /** RegularExpression Id. */
  int ACHIEVE = 69;
  /** RegularExpression Id. */
  int PERFORM = 70;
  /** RegularExpression Id. */
  int MAINTAIN = 71;
  /** RegularExpression Id. */
  int QUERY = 72;
  /** RegularExpression Id. */
  int ASSERT = 73;
  /** RegularExpression Id. */
  int FAIL = 74;
  /** RegularExpression Id. */
  int RETRACT = 75;
  /** RegularExpression Id. */
  int UPDATE = 76;
  /** RegularExpression Id. */
  int TRY = 77;
  /** RegularExpression Id. */
  int CATCH = 78;
  /** RegularExpression Id. */
  int THROW = 79;
  /** RegularExpression Id. */
  int NEW = 80;
  /** RegularExpression Id. */
  int LPAREN = 81;
  /** RegularExpression Id. */
  int RPAREN = 82;
  /** RegularExpression Id. */
  int LBRACE = 83;
  /** RegularExpression Id. */
  int RBRACE = 84;
  /** RegularExpression Id. */
  int LBRACKET = 85;
  /** RegularExpression Id. */
  int RBRACKET = 86;
  /** RegularExpression Id. */
  int ASSIGN = 87;
  /** RegularExpression Id. */
  int GT = 88;
  /** RegularExpression Id. */
  int LT = 89;
  /** RegularExpression Id. */
  int BANG = 90;
  /** RegularExpression Id. */
  int EQ = 91;
  /** RegularExpression Id. */
  int LE = 92;
  /** RegularExpression Id. */
  int GE = 93;
  /** RegularExpression Id. */
  int NE = 94;
  /** RegularExpression Id. */
  int SC_OR = 95;
  /** RegularExpression Id. */
  int SC_AND = 96;
  /** RegularExpression Id. */
  int INCR = 97;
  /** RegularExpression Id. */
  int DECR = 98;
  /** RegularExpression Id. */
  int PLUS = 99;
  /** RegularExpression Id. */
  int MINUS = 100;
  /** RegularExpression Id. */
  int STAR = 101;
  /** RegularExpression Id. */
  int SLASH = 102;
  /** RegularExpression Id. */
  int INTEGER = 103;
  /** RegularExpression Id. */
  int FLOAT = 104;
  /** RegularExpression Id. */
  int ADDRESS = 105;
  /** RegularExpression Id. */
  int VARIABLE = 106;
  /** RegularExpression Id. */
  int IDENTIFIER = 107;
  /** RegularExpression Id. */
  int CLASS_IDENTIFIER = 108;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;
  /** Lexical state. */
  int IN_STRING = 4;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<WS>",
    "\"//\"",
    "<token of kind 3>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 8>",
    "\"\\\"\"",
    "\"\\\"\"",
    "\"\\\\\\\"\"",
    "\"\\\\t\"",
    "\"\\\\n\"",
    "\"\\\\r\"",
    "\"\\\\f\"",
    "<token of kind 16>",
    "<ws>",
    "<delim>",
    "<letter>",
    "<digit>",
    "<charac>",
    "<EXP>",
    "<SIGN>",
    "<number0>",
    "<number1>",
    "<number2>",
    "<hexa0>",
    "\"import\"",
    "<GOAL_DECL>",
    "<FACT_DECL>",
    "<OBSERVER_DECL>",
    "\"plan\"",
    "<PLAN_NAME>",
    "<PLAN_DOC>",
    "<PLAN_GOALSPEC>",
    "\"CONCLUDE\"",
    "<PLAN_CONTEXT>",
    "<PLAN_PRECONDITION>",
    "<PLAN_UTILITY>",
    "<PLAN_EFFECTS>",
    "<PLAN_FAILURE>",
    "<PLAN_ATTRIBUTES>",
    "<PLAN_BODY>",
    "\"AND\"",
    "\"OR\"",
    "\"PARALLEL\"",
    "\"DO_ALL\"",
    "\"DO_ANY\"",
    "\"DO\"",
    "\"WHILE\"",
    "\"WHEN\"",
    "\"ATOMIC\"",
    "\"WAIT\"",
    "\"IF\"",
    "\"ELSE\"",
    "\"FOR\"",
    "\":UTILITY\"",
    "\":BY\"",
    "\":NOT-BY\"",
    "\"EXECUTE\"",
    "\"LOAD_PACKAGE\"",
    "\"LOAD_FROM_URL\"",
    "\"PARSE\"",
    "\"FACT\"",
    "\"RETRIEVE\"",
    "\"IS_TRUE\"",
    "\"POST\"",
    "\"UNPOST\"",
    "\"ACHIEVE\"",
    "\"PERFORM\"",
    "\"MAINTAIN\"",
    "\"QUERY\"",
    "\"ASSERT\"",
    "\"FAIL\"",
    "\"RETRACT\"",
    "\"UPDATE\"",
    "\"TRY\"",
    "\"CATCH\"",
    "\"THROW\"",
    "\"NEW\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"=\"",
    "\">\"",
    "\"<\"",
    "\"!\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"++\"",
    "\"--\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "<INTEGER>",
    "<FLOAT>",
    "<ADDRESS>",
    "<VARIABLE>",
    "<IDENTIFIER>",
    "<CLASS_IDENTIFIER>",
    "\".\"",
    "\";\"",
    "\":\"",
    "\"`\"",
    "\",\"",
  };

}
