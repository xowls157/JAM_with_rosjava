/* Generated By:JavaCC: Do not edit this line. JAMParserTokenManager.java */
package uos.ai.jam.parser;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.util.LinkedList;
import java.util.List;
import java.util.StringTokenizer;
import uos.ai.jam.Interpreter;
import uos.ai.jam.exception.AgentRuntimeException;
import uos.ai.jam.exception.ExceptionManager;
import uos.ai.jam.exception.GlobalCatch;
import uos.ai.jam.expression.Expression;
import uos.ai.jam.expression.FunctionCall;
import uos.ai.jam.expression.ObjectCreation;
import uos.ai.jam.expression.ObjectGetField;
import uos.ai.jam.expression.ObjectInvokeMethod;
import uos.ai.jam.expression.Relation;
import uos.ai.jam.expression.SymbolTable;
import uos.ai.jam.expression.Value;
import uos.ai.jam.expression.Variable;
import uos.ai.jam.expression.condition.Condition;
import uos.ai.jam.expression.condition.ExpressionCondition;
import uos.ai.jam.expression.condition.FactCondition;
import uos.ai.jam.expression.condition.RetrieveCondition;
import uos.ai.jam.plan.Plan;
import uos.ai.jam.plan.PlanContext;
import uos.ai.jam.plan.action.AchieveGoalAction;
import uos.ai.jam.plan.action.Action;
import uos.ai.jam.plan.action.AssertAction;
import uos.ai.jam.plan.action.AssignAction;
import uos.ai.jam.plan.action.FactAction;
import uos.ai.jam.plan.action.FailAction;
import uos.ai.jam.plan.action.GoalAction;
import uos.ai.jam.plan.action.LoadPackageAction;
import uos.ai.jam.plan.action.LoadFromURLAction;
import uos.ai.jam.plan.action.MaintainGoalAction;
import uos.ai.jam.plan.action.ObjectAction;
import uos.ai.jam.plan.action.ObjectInvokeAction;
import uos.ai.jam.plan.action.ParseAction;
import uos.ai.jam.plan.action.PerformGoalAction;
import uos.ai.jam.plan.action.PostAction;
import uos.ai.jam.plan.action.QueryGoalAction;
import uos.ai.jam.plan.action.RetractAction;
import uos.ai.jam.plan.action.RetrieveAction;
import uos.ai.jam.plan.action.SimpleAction;
import uos.ai.jam.plan.action.TestAction;
import uos.ai.jam.plan.action.ThrowAction;
import uos.ai.jam.plan.action.UnpostAction;
import uos.ai.jam.plan.action.UpdateAction;
import uos.ai.jam.plan.constructor.PlanAtomicConstruct;
import uos.ai.jam.plan.constructor.PlanBranchConstruct;
import uos.ai.jam.plan.constructor.PlanConstruct;
import uos.ai.jam.plan.constructor.PlanDoAllConstruct;
import uos.ai.jam.plan.constructor.PlanDoAnyConstruct;
import uos.ai.jam.plan.constructor.PlanDoConstruct;
import uos.ai.jam.plan.constructor.PlanParallelConstruct;
import uos.ai.jam.plan.constructor.PlanSequenceConstruct;
import uos.ai.jam.plan.constructor.PlanSimpleConstruct;
import uos.ai.jam.plan.constructor.PlanTryCatchConstruct;
import uos.ai.jam.plan.constructor.PlanTryCatchEntry;
import uos.ai.jam.plan.constructor.PlanWaitConstruct;
import uos.ai.jam.plan.constructor.PlanWhenConstruct;
import uos.ai.jam.plan.constructor.PlanWhileConstruct;
import uos.ai.jam.util.ClassLoaderEX;

/** Token Manager. */
public class JAMParserTokenManager implements JAMParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 90;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40000000L);
      case 34:
         jjmatchedKind = 9;
         return jjMoveNfa_0(4, 0);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100000000L);
      case 40:
         jjmatchedKind = 81;
         return jjMoveNfa_0(4, 0);
      case 41:
         jjmatchedKind = 82;
         return jjMoveNfa_0(4, 0);
      case 42:
         jjmatchedKind = 101;
         return jjMoveNfa_0(4, 0);
      case 43:
         jjmatchedKind = 99;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 44:
         jjmatchedKind = 113;
         return jjMoveNfa_0(4, 0);
      case 45:
         jjmatchedKind = 100;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000000L);
      case 46:
         jjmatchedKind = 109;
         return jjMoveNfa_0(4, 0);
      case 47:
         jjmatchedKind = 102;
         return jjMoveStringLiteralDfa1_0(0x14L, 0x0L);
      case 58:
         jjmatchedKind = 111;
         return jjMoveStringLiteralDfa1_0(0xe00000000000000L, 0x0L);
      case 59:
         jjmatchedKind = 110;
         return jjMoveNfa_0(4, 0);
      case 60:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000000L);
      case 61:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x8000000L);
      case 62:
         jjmatchedKind = 88;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x10100000000000L, 0x220L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x4000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x3800000000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1080000000000000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x401L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x40000010000000L, 0x4L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x8000400100000000L, 0x48L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x802L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa000L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1010L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x2c000000000000L, 0x0L);
      case 91:
         jjmatchedKind = 85;
         return jjMoveNfa_0(4, 0);
      case 93:
         jjmatchedKind = 86;
         return jjMoveNfa_0(4, 0);
      case 96:
         jjmatchedKind = 112;
         return jjMoveNfa_0(4, 0);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x10100000000000L, 0x220L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x1000000000L, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x3800000000000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1080000000000000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x401L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x40000010000000L, 0x4L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x0L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x10000L);
      case 111:
         return jjMoveStringLiteralDfa1_0(0x200000000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x8000400100000000L, 0x48L);
      case 113:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x802L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x0L, 0xa000L);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1010L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x2c000000000000L, 0x0L);
      case 123:
         jjmatchedKind = 83;
         return jjMoveNfa_0(4, 0);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 125:
         jjmatchedKind = 84;
         return jjMoveNfa_0(4, 0);
      default :
         return jjMoveNfa_0(4, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 0);
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 96;
            jjmatchedPos = 1;
         }
         break;
      case 42:
         if ((active0 & 0x10L) != 0L)
         {
            jjmatchedKind = 4;
            jjmatchedPos = 1;
         }
         break;
      case 43:
         if ((active1 & 0x200000000L) != 0L)
         {
            jjmatchedKind = 97;
            jjmatchedPos = 1;
         }
         break;
      case 45:
         if ((active1 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 1;
         }
         break;
      case 47:
         if ((active0 & 0x4L) != 0L)
         {
            jjmatchedKind = 2;
            jjmatchedPos = 1;
         }
         break;
      case 61:
         if ((active1 & 0x8000000L) != 0L)
         {
            jjmatchedKind = 91;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x20000000L) != 0L)
         {
            jjmatchedKind = 93;
            jjmatchedPos = 1;
         }
         else if ((active1 & 0x40000000L) != 0L)
         {
            jjmatchedKind = 94;
            jjmatchedPos = 1;
         }
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x8020400000000000L, active1, 0x4481L);
      case 66:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10842L);
      case 70:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         break;
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L, active1, 0x8000L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000100000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa2_0(active0, 0x800100000000000L, active1, 0x10L);
      case 79:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6101801000000000L, active1, 0x8L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 82:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 83:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x204L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x100L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x8020400000000000L, active1, 0x4481L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10842L);
      case 102:
         if ((active0 & 0x40000000000000L) != 0L)
         {
            jjmatchedKind = 54;
            jjmatchedPos = 1;
         }
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0xc000000000000L, active1, 0x8000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000100000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800100000000000L, active1, 0x10L);
      case 111:
         if ((active0 & 0x2000000000000L) != 0L)
         {
            jjmatchedKind = 49;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x6101801000000000L, active1, 0x8L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x1000L);
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 45;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x2000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x204L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000000L, active1, 0x100L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000000000L, active1, 0L);
      case 124:
         if ((active1 & 0x80000000L) != 0L)
         {
            jjmatchedKind = 95;
            jjmatchedPos = 1;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 1);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000100000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 68:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000000000000L, active1, 0x100L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000000000000L, active1, 0x480L);
      case 78:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x10L);
      case 82:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000400000000000L, active1, 0x8040L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x208L);
      case 84:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x4802L);
      case 87:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         break;
      case 89:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa3_0(active0, 0x1800000000000L, active1, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x6000000100000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1L);
      case 100:
         if ((active0 & 0x100000000000L) != 0L)
         {
            jjmatchedKind = 44;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008000000000000L, active1, 0x100L);
      case 104:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x24000000000000L, active1, 0x480L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x810000000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000L, active1, 0x10L);
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x8000400000000000L, active1, 0x8040L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000000L, active1, 0x208L);
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0x4802L);
      case 119:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         break;
      case 121:
         if ((active0 & 0x400000000000000L) != 0L)
         {
            jjmatchedKind = 58;
            jjmatchedPos = 2;
         }
         else if ((active1 & 0x2000L) != 0L)
         {
            jjmatchedKind = 77;
            jjmatchedPos = 2;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 2);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 2);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 2);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00000000000L, active1, 0x1000L);
      case 67:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000001000000000L, active1, 0x4000L);
      case 68:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x20L);
      case 76:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 79:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x8010L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x902L);
      case 83:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 84:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x4L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x1c00000000000L, active1, 0x1000L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x1000001000000000L, active1, 0x4000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x6000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x80000000000000L) != 0L)
         {
            jjmatchedKind = 55;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x200L);
      case 102:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x40L);
      case 105:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000000000000L, active1, 0x20L);
      case 108:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 110:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 3;
         }
         else if ((active0 & 0x8000000000000L) != 0L)
         {
            jjmatchedKind = 51;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x80L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L, active1, 0x8010L);
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x902L);
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0L);
      case 116:
         if ((active0 & 0x20000000000000L) != 0L)
         {
            jjmatchedKind = 53;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x1L) != 0L)
         {
            jjmatchedKind = 64;
            jjmatchedPos = 3;
         }
         else if ((active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 67;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000000L, active1, 0x4L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 3);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 3);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 3);
   }
   switch(curChar)
   {
      case 45:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000000L, active1, 0L);
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 69:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
      case 72:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         break;
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x2L);
      case 76:
         return jjMoveStringLiteralDfa5_0(active0, 0x200c01000000000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 82:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x204L);
      case 83:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 84:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1080L);
      case 85:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 87:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         break;
      case 89:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         break;
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x6000000000000000L, active1, 0L);
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x800L);
      case 101:
         if ((active0 & 0x4000000000000L) != 0L)
         {
            jjmatchedKind = 50;
            jjmatchedPos = 4;
         }
         else if ((active0 & 0x8000000000000000L) != 0L)
         {
            jjmatchedKind = 63;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x20L);
      case 104:
         if ((active1 & 0x4000L) != 0L)
         {
            jjmatchedKind = 78;
            jjmatchedPos = 4;
         }
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0x2L);
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x200c01000000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x40L);
      case 114:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000L, active1, 0x204L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x10L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x1080L);
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000000000000L, active1, 0L);
      case 119:
         if ((active1 & 0x8000L) != 0L)
         {
            jjmatchedKind = 79;
            jjmatchedPos = 4;
         }
         break;
      case 121:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 4;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 4);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 4);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 4);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 66:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 69:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 76:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 84:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x4L);
      case 86:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L);
      case 89:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x80L);
      case 98:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0L);
      case 99:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x800L);
      case 101:
         if ((active1 & 0x1000L) != 0L)
         {
            jjmatchedKind = 76;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x2L);
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x800000000000L) != 0L)
         {
            jjmatchedKind = 47;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x40L);
      case 116:
         if ((active0 & 0x10000000L) != 0L)
         {
            jjmatchedKind = 28;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x10L) != 0L)
         {
            jjmatchedKind = 68;
            jjmatchedPos = 5;
         }
         else if ((active1 & 0x200L) != 0L)
         {
            jjmatchedKind = 73;
            jjmatchedPos = 5;
         }
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000000L, active1, 0x4L);
      case 118:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x20L);
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
         {
            jjmatchedKind = 48;
            jjmatchedPos = 5;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 5);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 5);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 5);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 68:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 77:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 84:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 89:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         break;
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000000000L, active1, 0L);
      case 100:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x4L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
         }
         else if ((active1 & 0x20L) != 0L)
         {
            jjmatchedKind = 69;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x400000000000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x80L);
      case 109:
         if ((active1 & 0x40L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000000000000000L, active1, 0L);
      case 116:
         if ((active1 & 0x800L) != 0L)
         {
            jjmatchedKind = 75;
            jjmatchedPos = 6;
         }
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x2L);
      case 121:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            jjmatchedKind = 59;
            jjmatchedPos = 6;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 6);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 6);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 6);
   }
   switch(curChar)
   {
      case 67:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
      case 69:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         break;
      case 76:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
         }
         break;
      case 78:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
         }
         break;
      case 79:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 89:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
         }
         break;
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 7;
         }
         else if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 7;
         }
         break;
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 7;
         }
         break;
      case 110:
         if ((active1 & 0x80L) != 0L)
         {
            jjmatchedKind = 71;
            jjmatchedPos = 7;
         }
         break;
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x4000000000000000L, active1, 0L);
      case 121:
         if ((active0 & 0x200000000000000L) != 0L)
         {
            jjmatchedKind = 57;
            jjmatchedPos = 7;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 7);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjMoveNfa_0(4, 7);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 7);
   }
   switch(curChar)
   {
      case 75:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      case 77:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
      case 107:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L);
      case 109:
         return jjMoveStringLiteralDfa9_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 8);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 8);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 8);
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L);
      case 95:
         return jjMoveStringLiteralDfa10_0(active0, 0x4000000000000000L);
      case 97:
         return jjMoveStringLiteralDfa10_0(active0, 0x2000000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 9);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 9);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 9);
   }
   switch(curChar)
   {
      case 71:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      case 85:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L);
      case 103:
         return jjMoveStringLiteralDfa11_0(active0, 0x2000000000000000L);
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 10);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 10);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 10);
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 11;
         }
         break;
      case 82:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L);
      case 101:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 11;
         }
         break;
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x4000000000000000L);
      default :
         break;
   }
   return jjMoveNfa_0(4, 11);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjMoveNfa_0(4, 11);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
   return jjMoveNfa_0(4, 11);
   }
   switch(curChar)
   {
      case 76:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 12;
         }
         break;
      case 108:
         if ((active0 & 0x4000000000000000L) != 0L)
         {
            jjmatchedKind = 62;
            jjmatchedPos = 12;
         }
         break;
      default :
         break;
   }
   return jjMoveNfa_0(4, 12);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int strKind = jjmatchedKind;
   int strPos = jjmatchedPos;
   int seenUpto;
   input_stream.backup(seenUpto = curPos + 1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { throw new Error("Internal Error"); }
   curPos = 0;
   int startsAt = 0;
   jjnewStateCnt = 151;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     jjCheckNAddStates(0, 2);
                  }
                  else if ((0x100003600L & l) != 0L)
                  {
                     if (kind > 1)
                        kind = 1;
                     jjCheckNAdd(0);
                  }
                  else if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  else if (curChar == 36)
                  {
                     if (kind > 106)
                        kind = 106;
                     jjCheckNAdd(114);
                  }
                  else if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 96;
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 3;
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 0:
                  if ((0x100003600L & l) == 0L)
                     break;
                  if (kind > 1)
                     kind = 1;
                  jjCheckNAdd(0);
                  break;
               case 1:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 2:
                  if ((0xffff7fffffffffffL & l) != 0L && kind > 3)
                     kind = 3;
                  break;
               case 3:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 6:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 7:
                  if (curChar == 58 && kind > 31)
                     kind = 31;
                  break;
               case 16:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 17:
                  if (curChar == 58 && kind > 33)
                     kind = 33;
                  break;
               case 22:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 23:
                  if (curChar == 58 && kind > 34)
                     kind = 34;
                  break;
               case 37:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 38:
                  if (curChar == 58 && kind > 37)
                     kind = 37;
                  break;
               case 46:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 47:
                  if (curChar == 58 && kind > 38)
                     kind = 38;
                  break;
               case 60:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 61:
                  if (curChar == 58 && kind > 39)
                     kind = 39;
                  break;
               case 69:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 70:
                  if (curChar == 58 && kind > 40)
                     kind = 40;
                  break;
               case 78:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 79:
                  if (curChar == 58 && kind > 42)
                     kind = 42;
                  break;
               case 90:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 91:
                  if (curChar == 58 && kind > 43)
                     kind = 43;
                  break;
               case 95:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 96:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(24, 27);
                  break;
               case 98:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 99;
                  break;
               case 99:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(28, 30);
                  break;
               case 100:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddTwoStates(101, 95);
                  break;
               case 101:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 102:
                  if (curChar != 46)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(31, 34);
                  break;
               case 104:
                  if ((0x280000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(35, 37);
                  break;
               case 106:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(38, 42);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(43, 48);
                  break;
               case 108:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(49, 53);
                  break;
               case 109:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 104)
                     kind = 104;
                  jjCheckNAddStates(54, 59);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 112:
                  if (curChar == 48)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 113:
                  if (curChar != 36)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(114);
                  break;
               case 114:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjCheckNAdd(114);
                  break;
               case 117:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 118:
                  if (curChar == 58 && kind > 29)
                     kind = 29;
                  break;
               case 123:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 124:
                  if (curChar == 58 && kind > 35)
                     kind = 35;
                  break;
               case 129:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 130:
                  if (curChar == 58 && kind > 30)
                     kind = 30;
                  break;
               case 135:
                  if ((0x100002600L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 136:
                  if (curChar == 58 && kind > 41)
                     kind = 41;
                  break;
               case 142:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAddStates(3, 5);
                  break;
               case 143:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAdd(143);
                  break;
               case 144:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  jjCheckNAddStates(0, 2);
                  break;
               case 146:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 147:
                  if ((0x3ff200000000000L & l) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 148:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 149;
                  break;
               case 150:
                  if ((0x3ff200000000000L & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddTwoStates(148, 150);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 4:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 107)
                        kind = 107;
                     jjCheckNAddStates(68, 70);
                  }
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(71, 72);
                  else if ((0x8000000080L & l) != 0L)
                     jjAddStates(73, 74);
                  else if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  else if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  else if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  else if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  else if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  else if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  else if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  else if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 2:
                  if (kind > 3)
                     kind = 3;
                  break;
               case 5:
                  if ((0x4000000040000L & l) != 0L)
                     jjAddStates(6, 7);
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 9:
                  if ((0x40000000400000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if ((0x8000000080000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 11;
                  break;
               case 13:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(8, 9);
                  break;
               case 18:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 19:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(10, 11);
                  break;
               case 24:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 21;
                  break;
               case 25:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 28:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 27;
                  break;
               case 29:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 30:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if ((0x200000002000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 30;
                  break;
               case 32:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 31;
                  break;
               case 33:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 32;
                  break;
               case 34:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 33;
                  break;
               case 35:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 34;
                  break;
               case 36:
                  if ((0x10000000100000L & l) != 0L)
                     jjAddStates(12, 13);
                  break;
               case 39:
                  if ((0x100000001000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 36;
                  break;
               case 40:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 42;
                  break;
               case 44:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if ((0x400000004000L & l) != 0L)
                     jjAddStates(14, 15);
                  break;
               case 48:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 49:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if ((0x400000004000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if ((0x1000000010000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 59:
                  if ((0x200000002000000L & l) != 0L)
                     jjAddStates(16, 17);
                  break;
               case 62:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 63:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(18, 19);
                  break;
               case 71:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 72:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if ((0x4000000040L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 77:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(20, 21);
                  break;
               case 80:
                  if ((0x2000000020L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 81:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 87:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if ((0x200000002000000L & l) != 0L)
                     jjAddStates(22, 23);
                  break;
               case 92:
                  if ((0x1000000010L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 93:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 92;
                  break;
               case 94:
                  if ((0x400000004L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 97:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(75, 76);
                  break;
               case 103:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(77, 78);
                  break;
               case 110:
                  if (curChar == 120)
                     jjCheckNAdd(111);
                  break;
               case 111:
                  if ((0x7e00000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  jjCheckNAdd(111);
                  break;
               case 114:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 106)
                     kind = 106;
                  jjstateSet[jjnewStateCnt++] = 114;
                  break;
               case 115:
                  if ((0x8000000080L & l) != 0L)
                     jjAddStates(73, 74);
                  break;
               case 116:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(60, 61);
                  break;
               case 119:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 120:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 121:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 120;
                  break;
               case 122:
                  if ((0x100000001000L & l) != 0L)
                     jjAddStates(62, 63);
                  break;
               case 125:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 126:
                  if ((0x800000008000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 127:
                  if ((0x4000000040L & l) != 0L)
                     jjAddStates(71, 72);
                  break;
               case 128:
                  if ((0x8000000080000L & l) != 0L)
                     jjAddStates(64, 65);
                  break;
               case 131:
                  if ((0x10000000100000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 128;
                  break;
               case 132:
                  if ((0x800000008L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 134:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(66, 67);
                  break;
               case 137:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 138:
                  if ((0x20000000200000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 137;
                  break;
               case 139:
                  if ((0x100000001000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if ((0x20000000200L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if ((0x200000002L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 145:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAddStates(68, 70);
                  break;
               case 146:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 107)
                     kind = 107;
                  jjCheckNAdd(146);
                  break;
               case 147:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(147, 148);
                  break;
               case 149:
               case 150:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 108)
                     kind = 108;
                  jjCheckNAddTwoStates(148, 150);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L && kind > 3)
                     kind = 3;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 151 - (jjnewStateCnt = startsAt)))
         break;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { break; }
   }
   if (jjmatchedPos > strPos)
      return curPos;

   int toRet = Math.max(curPos, seenUpto);

   if (curPos < toRet)
      for (i = toRet - Math.min(curPos, seenUpto); i-- > 0; )
         try { curChar = input_stream.readChar(); }
         catch(java.io.IOException e) { throw new Error("Internal Error : Please send a bug report."); }

   if (jjmatchedPos < strPos)
   {
      jjmatchedKind = strKind;
      jjmatchedPos = strPos;
   }
   else if (jjmatchedPos == strPos && jjmatchedKind > strKind)
      jjmatchedKind = strKind;

   return toRet;
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_3(0x80L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_3(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 5)
                        kind = 5;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 34:
         return jjStopAtPos(0, 10);
      case 92:
         return jjMoveStringLiteralDfa1_4(0xf800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 34:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(1, 11);
         break;
      case 102:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(1, 15);
         break;
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(1, 13);
         break;
      case 114:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(1, 14);
         break;
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStopAtPos(1, 12);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   143, 101, 102, 143, 101, 95, 6, 7, 16, 17, 22, 23, 37, 38, 46, 47, 
   60, 61, 69, 70, 78, 79, 90, 91, 95, 97, 100, 109, 95, 100, 108, 103, 
   95, 100, 107, 95, 100, 106, 101, 102, 95, 100, 106, 101, 102, 103, 95, 100, 
   107, 101, 102, 95, 100, 108, 101, 102, 95, 97, 100, 109, 117, 118, 123, 124, 
   129, 130, 135, 136, 146, 147, 148, 133, 141, 121, 126, 98, 99, 104, 105, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, "\50", 
"\51", "\173", "\175", "\133", "\135", "\75", "\76", "\74", "\41", "\75\75", 
"\74\75", "\76\75", "\41\75", "\174\174", "\46\46", "\53\53", "\55\55", "\53", "\55", 
"\52", "\57", null, null, null, null, null, null, "\56", "\73", "\72", "\140", "\54", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_FORMAL_COMMENT",
   "IN_MULTI_LINE_COMMENT",
   "IN_STRING",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, 1, 2, 3, 0, 0, 0, -1, 4, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffff0000401L, 0x3ffffffffffffL, 
};
static final long[] jjtoSkip = {
   0x2e2L, 0x0L, 
};
static final long[] jjtoSpecial = {
   0xe2L, 0x0L, 
};
static final long[] jjtoMore = {
   0x1f91cL, 0x0L, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[151];
private final int[] jjstateSet = new int[302];
private final StringBuilder jjimage = new StringBuilder();
private StringBuilder image = jjimage;
private int jjimageLen;
private int lengthOfMatch;
protected char curChar;
/** Constructor. */
public JAMParserTokenManager(SimpleCharStream stream){
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public JAMParserTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 151; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 5 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 2:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 3:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         if (jjmatchedPos == 0 && jjmatchedKind > 8)
         {
            jjmatchedKind = 8;
         }
         break;
       case 4:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         if (jjmatchedPos == 0 && jjmatchedKind > 16)
         {
            jjmatchedKind = 16;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
           matchedToken.specialToken = specialToken;
           TokenLexicalActions(matchedToken);
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
           {
              matchedToken = jjFillToken();
              if (specialToken == null)
                 specialToken = matchedToken;
              else
              {
                 matchedToken.specialToken = specialToken;
                 specialToken = (specialToken.next = matchedToken);
              }
              SkipLexicalActions(matchedToken);
           }
           else
              SkipLexicalActions(null);
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
        MoreLexicalActions();
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      case 3 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                          input_stream.backup(1);
         break;
      case 11 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                  image.setLength(image.length() - 2); image.append("\u005c"");
         break;
      case 12 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                  image.setLength(image.length() - 2); image.append("\u005ct");
         break;
      case 13 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                  image.setLength(image.length() - 2); image.append("\u005cn");
         break;
      case 14 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                  image.setLength(image.length() - 2); image.append("\u005cr");
         break;
      case 15 :
         image.append(input_stream.GetSuffix(jjimageLen));
         jjimageLen = 0;
                  image.setLength(image.length() - 2); image.append("\u005cf");
         break;
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 10 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                image.setLength(image.length() - 1);
                matchedToken.image = image.toString();
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
