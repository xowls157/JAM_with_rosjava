import kgu.uos.ai.jam.tutorial.*;

GOALS :
	PERFORM MoveItem("fetchbot01", "drill01", "shelf09");

FACTS :
    FACT type("fetchbot01", "Fetchbot");
	FACT type("drill01", "HumanScaleObject");
	FACT type("shelf04", "Shelf");
	FACT type("shelf09", "Shelf");
    FACT on("cokeCan01", "shelf03");
    FACT on("drill01", "shelf04");
    FACT on("plate01", "shelf05");
    FACT inCenterOf("fetchbot01", "stockRoom01");
    FACT batteryRemaining("fetchbot01", "high");
    
    FACT location("shelf04", "444");
	FACT location("shelf09", "999");
    FACT location("drill01", "0101");
    FACT location("armStanding", "5656");

PLAN PERFORM MoveItem($robot, $item, $goalLocation){

PRECONDITION :
	FACT type($robot, "Fetchbot");
	FACT type($item, "HumanScaleObject");
	FACT type($goalLocation, "Shelf");
	
CONTEXT :
	FACT batteryRemaining($robot, "high");
	
BODY :
	System.out.println("----------> Start MoveItem(" + $item + ", " + $goalLocation + ")");
	FACT on($item, $shelf);
	PERFORM MoveInFrontOf($robot, $shelf, 1);
	PERFORM PickUpAnItem($robot, $item);
	PERFORM MoveInFrontOf($robot, $goalLocation, 4);
	PERFORM PutDownAnItemOn($robot, $item, $goalLocation);
	
    System.out.println("----------> Finished MoveItem(" + $item + ", " + $goalLocation + ")");
    
FAILURE :
	System.out.println("----------> Error MoveItem(" + $item + ", " + $goalLocation + ")");
}

PLAN PERFORM MoveInFrontOf($robot, $shelf, $num){

PRECONDITION :
	FACT type($robot, "Fetchbot");
	FACT type($shelf, "Shelf");

BODY :
	System.out.println("----------> Start MoveInFrontOf(" + $robot + ", " + $shelf + ")");
	
	// Send Some Action Message to ROS
	System.out.println("I send goto Message to ROS");
	$sender = new RosMessageSender();
	$sender.sendActionMessage($num);
	System.out.println("I get succeed Message from ROS");
	
	System.out.println("----------> Finished MoveInFrontOf(" + $robot + ", " + $shelf + ")");
	
EFFECTS :
	RETRACT inFrontOf($robot, $somewhere);
	RETRACT inCenterOf($robot, $somewhere);
	ASSERT inFrontOf($robot, $shelf);

}

PLAN PERFORM PickUpAnItem($robot, $item){

PRECONDITION :
	FACT type($robot, "Fetchbot");
	FACT type($item, "HumanScaleObject");

BODY :
	System.out.println("----------> Start PickUpAItem(" + $robot + ", " + $item + ")");
	
	FACT location("drill01", $goalLocation01);
    FACT location("armStanding", $goalLocation02);
	
	PERFORM ArmMotion($robot, $goalLocation01, 2);
	PERFORM ArmMotion($robot, $goalLocation02, 3);
	
	System.out.println("----------> Finished PickUpAItem(" + $robot + ", " + $item + ")");

EFFECTS :
	RETRACT on($item, $somewhere);
	ASSERT grapsedBy($item, $robot);
}

PLAN PERFORM ArmMotion($robot, $goalLocation, $num){

PRECONDITION :
	FACT type($robot, "Fetchbot");

BODY :
	System.out.println("----------> Start ArmMotion(" + $robot + ", " + $goalLocation + ")");
	
	// Send Some Action Message to ROS
	System.out.println("I Send Arm Motion Message to ROS");
	$sender = new RosMessageSender();
	$sender.sendActionMessage($num);
	System.out.println("I get succeed Message from ROS");
	
	System.out.println("----------> Finished ArmMotion(" + $robot + ", " + $goalLocation + ")");

EFFECTS :
	RETRACT on($item, $somewhere);
	ASSERT grapsedBy($item, $robot);
}

PLAN PERFORM PutDownAnItemOn($robot, $item, $goalLocation){

PRECONDITION :
	FACT type($robot, "Fetchbot");
	FACT type($item, "HumanScaleObject");
	FACT type($goalLocation, "Shelf");

BODY :
	System.out.println("----------> Start PutDownAnItemOn(" + $robot + ", " + $item + ", " + $goalLocation + ")");
	
	PERFORM ArmMotion($robot, $goalLocation, 5);
	
	System.out.println("----------> Finished PutDownAnItemOn(" + $robot + ", " + $item + ", " + $goalLocation + ")");

EFFECTS :
	RETRACT grapsedBy($item, $robot);
	ASSERT on($item, $goalLocation);
}